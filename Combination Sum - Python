"""
@author : Avia Avikasis

question:
Given an list of distinct integers candidates and a
target integer, return a list of all unique
combinations of candidates where the chosen
numbers sum to target. You may return the combinations
in any order.

The same number may be chosen from candidates an unlimited
number of times. Two combinations are unique if the frequency
of at least one of the chosen numbers is different.
================================================
for example:

example 1

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 + 2 + 3 = 7. Note that 2 can be used multiple times.
the same: 7 = 7.

-------------------------------------
example 2

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

--------------------------------------
example 3

Input: candidates = [2], target = 1
Output: []

---------------------------------------
Try it yourself:
please copy and paste all text in this page to ide
on your machine and run it.

"""

import copy


# the function that find all combinations
# of nums by search_candidate function,
# and print them
def combinations(l, target):
    result = []
    # loop that run over all elements in list and
    # operate for anyone the search_candidate function
    for i in range(len(l)):
        search_candidate(l, target, 0, i, [], result)
    print(result)


# this mainly recursive function is try to find combinations
# from the current element onwards.
# argument candidate_l - the list of the elements that
# Accumulated While trying to find specific combination
# argument cur_sum - the sum that Accumulated until this iteration
def search_candidate(l, target, cur_sum, current, candidate_l, result):
    cur_sum += l[current]
    candidate_l.append(l[current])
    if cur_sum == target:
        result.append(candidate_l)
        return
    for i in range(current, len(l) - 1):
        if cur_sum + l[i + 1] <= target:
            search_candidate(l, target, cur_sum, i + 1, copy.copy(candidate_l), result)
    if cur_sum + l[current] <= target:
        search_candidate(l, target, cur_sum, current, copy.copy(candidate_l), result)


# function that receive input from user in safety
def get_number():
    userinput = input()
    try:
        int(userinput)
        return int(userinput)
    except:
        print("not valid input, please re-enter : ")
        return get_number()


def main():
    l = []
    print("please enter different positive elements for list, and finally press 0 : ")
    user_input = get_number()
    while user_input != 0:
        if user_input > 0 and user_input not in l:
            l.append(user_input)
            user_input = get_number()
        elif user_input < 0:
            print("sorry, this element is negative, please re-enter")
            user_input = get_number()
        else:  # if user_input already entered
            print("sorry, this element already entered, please re-enter")
            user_input = get_number()

    print("please enter target num : ")
    while True:
        target = get_number()
        if target > 0:
            combinations(l, target)
            break
        else:
            print("sorry, this element is negative, please re-enter")
            continue


main()
